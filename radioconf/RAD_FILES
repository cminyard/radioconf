This directory contains three types of files:

radios - This holds a basic description of all radios, primarily used
by yaesu_rw to know how to transfer the information, but also use by
yaesu_edit for the header descriptor.  That file's format is documented
in the file.

<radio>.rad - The radios file has a radio name, yaesu_edit uses that
radio name to find the proper rad file.  This contains a description of
the layout of the data in the memory in a way that yaesu_edit can display
and modify.

<radio>.empty - This is an clone of a radio in factory configuration.
It is used by yaesu_edit when you use the "New" operation.

<country code>.rpt - This holds repeater offsets for the various country
codes.  It's format is fairly simple, each non-empty and non-comment line
is:
  <start freq> <end freq> <offset direction> <offset amount>
The frequencies are given in MHz.kHz.Hz format, so 7.1 MHz would be
7.100.0.  Offset direction is "+" or "-", and the offset amount is
given in nn.nnkHz or nn.nnMHz.
So, for instance, US repeater offsets on 10 meters is:
 29.610.0	 29.690.0	-	100kHz
This means that if the radio is receiving on 29.650MHz, it will transmit
on 29.550MHz, for instance.  Note that the country code should be the
two-letter country code in the LANG environment variable.

RAD File Format
---------------
The descriptor file is a fairly simple format.  It's a pretty loose language,
there are reserved words, sort of, but not many, and they don't apply in
a lot of situation.  You should probably stay away from using reserved
words, and you should end enum names with _e, then it won't be a problem.

Note that FT-60R.rad has a good description of this.

The sourcecode distribution should have layout files that describe the
layout of the data in a more human-readable format.

Strings
-------

You can put anything in quotes ("") to allow you to add spaces in the file.
The \ works like in "C", a \n is a newline, \t is tab, etc.  The \n is
all you really need, in general.  Well, you can also use '\ ' (a space after
a backslash) to insert a space without quotes.

Numbers
-------

Numbers can use 0x for hex, or just numbers for decimal.  Octal is not
used, to avoid confusion, so a number that starts with zero is a decimal
number.

Addresses
---------

Some things take an address, which describes where to find the information
in the file.  The format is:

  ([L]<byte address>,<bit start>,<bit size>[,[r]<offset>]
   [:<byte address>,<bit start>,<bit size>[,<offset>][:...]])

So you specify a byte offset, a bit inside that byte, and a number of
bits.  The value may span bytes, it's done in big-endian format by default.
If a value spans bits that are not contiguous, then the ":" separates
multiple bit spans, the first one specifies the highest order bits.
This can be used to combine values that are related, like if setting
one value requires another value to be set to a specific number, it's
best to combine them both together and do a single enum for them.

Note that the start, size, offset, and offset are all specified in bits.

The offset is useful for lists, it gives a span between the fields.  So
if the list is specifying a 16-byte value, you use 128 for the offset.
A bunch of packed bits would use an offset of 1.

The offset may optionally start with 'r' in the last span.  This means
that bits are ordered "backwards" in the byte.  Normally, the
rightmost bit is considered bit 0, the bit to the left of it is bit 1,
etc.  In this case, 0x80 means that bit 7 is set.  The 'r' flag
switches the order so that the leftmost bit the first bit, so that 0x80
means that bit 0 is set.  This really only makes sense with sub-byte
fields, values larger than a byte my not work with this flag.  You would
think this would be consistent between radios, but the FT-60 and FT-7800
have this backwards from each other on memory banks and skips.

Built in types
--------------
The following built-in types are availble:

BCDFreq - BCD representation of a frequency, this is a 3-byte values
	as used in the FT-60R and probably others.  Must start on a
	byte offset and by a byte multiple length.

BCDFreq2 - A slightly different representation of BCD than BCDFreq,
	described in the VX-7R layout file.

CheckBox - A true/false value, the address specified should generally
	be one bit.

RCheckBox - A true/false value, but 0 means enabled and 1 means disabled.

YaesuString - This is a Yaesu-specific string format used in some radios
	like the FT-60R.  Must start on a byte offset and by a byte
	multiple length.

YaesuLCString - This is like YaesuString, but supports lower case and
	has a different layout.  This is for the VX-7R.

YaesuLCString16 - Like YaesuLCString, but each character is 16 bytes
	and unused (space) characters are converted to 0xffff.  This
	is for the CW ID in the VX-7R.

String - An ASCII string (though it's limited to standard characters).
        Must start on a byte offset and by a byte multiple length.

HexDigits - Unpacked hex digits (one per byte) with 0xff specifying the
	end of the string if it's shorter than the length.
        Must start on a byte offset and by a byte multiple length.

Fixed(pre,suf,inc,units[,options]) - This is a fixed-point decimal number
	represented as bits.  "pre" is the number of digits before the
	decimal, "suf" is the number of digits after the decimal,
	inc is the amount each single change in the bits changes
	the number, and units is a string displayed after the number.
	For instance, if you have a number like nnn.nnMHz and it goes
	up by .05MHz increments, you would use Fixed(3,2,5,MHz).  In
	the bits, 0 would be 000.05MHz, 1 would be 000.10MHz, 100 would be
	005.00MHz, etc.  If inc is not zero and the user enters an
	invalid value, it will be rounded to a proper value.

	The units can be anything, but MHz, kHz, and Hz have special
	meanings.  With these units, if a cut/paste occurs between
	two radio types, the conversion will occur correctly and
	automatically.

	options are not required, but may exist.  They are separated by
	":" and are:
	w=n - The character display width of the field

FixedFreq(pre,suf,inc,units[,options]) - This is like Fixed, but has
	some special attributed dealing with frequencies, the handling
	of ties as defined in "Lists" below.  In addition, it supports
	one extra option:
	sd=n - Sometimes it's useful to show a second decimal place, like
		on the FT-857 display.  This is the location of the second
		decimal place.  So, for a 9-digit frequency display,
		Fixed(3,6,1,MHz,sd=6) will display NNN.NNN.NNN.

BCDFixedFreq(pre,suf,inc,units[,options]) - Like FixedFreq, but the storage
        in memory is BCD.  Otherwise the same.

Int(min,max,offset,multiplier,label) - An integer with the given min/max
	range.  offset is added to the value when read out of memory and
	subtracted when written.  When reading from memory, after the
	offset is applied, the value is multiplied by the multiplier before
	being displayed.  When writing to memory, the opposite is done,
	the value is divided by the multipler and the offset is subtracted.
	The label is displayed after the value, and may be empty.

Empty - Used as an empty placeholder in lists, to display a string
      in the heading with nothing under it/beside it.

Special - This will not be displayed, but it can be used to pull bits or
	parts of bits from another field for use in ties.

SetToZero - This forces fields to be zero.  It takes a normal tie, which
	causes it to be set when the value is non-zero.

Special857A - There are fields in the 857 memory structure that must be set
	to certain values based upon the frequency (and, in the TX case
	are only set when split is enabled).  This type handles that,
	with the appropriate frequency and offset ties.

Special857B - There is a bit in the 857 that must be set in HF mode and cleared
	in VHF and up modes.  This type handles that.

SpecialTMV71 - There is a setting that needs to be one value for UHF
        and another for VHF.  Tie from RXFreq to set this.

User defined types
------------------

You have three basic things you can define: enums, tabs, and lists

tabs and lists appear in the tabs in the window in the order they are
specified.  Things appear in the tabs and lists in the order they are
specified.

Enums
-----

Enums are name/value pairs, much like in most programming languages.
The format is a little different, as you must assign a value.  The
format is:

enum <name>
     [altname <name>]
     <number> <string descriptor>
     [<number> <string descriptor>]
     ....
endenum

The name should generally end in "_e".  When you yaesu_edit displays
a variable of the type, it display the strings in question.  This allow
a field that is a bitfield with multiple values to have useful displays.

The name can then be used as a type in tabs and lists.

See the Cutting and Pasting section for the meaning of the altname
field.

Slists
------
These are much like enums, but they are a scrolled list instead.  This is
useful for very large lists that cannot be done with a pull-down menu.
The format is:

slist <name>
     [altname <name>]
     <number> <string descriptor>
     [<number> <string descriptor>]
     ....
endslist

Tabs
----

Tabs are used for configuration type information that is not repeated.
It has the format:

tab <name>
    <string>	<address>	<type>
    .
    .
endtab

The string is displayed by yaesu_edit.  The address specifies where to
get the information for that value, and the type is used to display
and should be a built-in type or an enum.

An offset in the address has no meaning here.

Lists
-----

Lists are for things that repeat regularly, like memories, groups of
DTMF digit sets, etc.  They use the same format as tables, except they
also take a length:

list <name> <length>[(base)] [label1 [label2 [....]]
    <string>	<address>	<type> [<options>]
    .
    .
endlist

The length is a number that specifies how many entries are in the list.
In this, the offset should be specified and gives the number of bits between
each item of the same type.

If a base is specified, that is added to all the address entries that end
with a "*".

The labels are used for the "name" field of the list items, for as many
as there are labels.

List entries may take options at the end.  Options are:

tie[(<type>)]=<name> - name is the name of another entry in the same
  list.  If you modify that entry, any tied entry will be updated.  That
  way, if two entries represent the same data two different ways, it is
  possible for updating one to automatically redisplay the other.  Note
  that if you need quotes, the entire entry must be in quotes, including the
  "tie=" part.

  Ties may have types, which give special meaning to the tie.  Several
  are generic.  A tie type of "enable" means the value enables another
  value if true.  A tie type of "enableoff" expects it is an offset
  direction and "+" or "-" values enable, any other value disables.

  A tie to BCDFreq understands three types: offset, basefreq, and
  freqoff.  A tie to FixedFreq understands offset and basefreq.
  offset is an enum with "smplx", "+", "-", "split", BCDFreq and
  FixedFreq uses this to do a proper offset from the basefreq, which
  must be another BCDFreq for that type or another FixedFreq for that
  type.  freqoff is a Fixed type that must end in MHz, kHz, or Hz and
  gives the offset to add or subtract.  FixedFreq does not use freqoff
  because it uses its internal value as the offset.

cutpaste=[true|false] - If cutpaste is set to false, the particular item
  will not be cut or pasted.  Useful for items that represent the same
  data, no need to send both of them over.  The default is true.

tone=[rx|tx|both] - If this is a tone/DCS mode handler, you should
  set this and follow the rules.

Multis
------

Multis may contain other lists and tabs, it is, in effect, a tabset with
a tab.  This is useful if you have a lot of related things and things
don't fit well into a single tab line.  Format is:

multi <name>
    <tab or list>
    .
    .
endmulti


Cutting and Pasting
-------------------

It is best to keep things as consistent as possible in all the radio
config file for the enum string names.  This allows cutting and pasting
to work well.  If the type names match between files, it will allow
the past to occur between two different types of radios.

So look in existing files (especially FT-60R.rad, which is kind of the
standard) for and keep the types and string names the same.